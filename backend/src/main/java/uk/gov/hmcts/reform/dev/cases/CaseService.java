package uk.gov.hmcts.reform.dev.cases;

import java.util.List;
import java.util.Optional;
import uk.gov.hmcts.reform.dev.cases.api.NewCaseDTO;
import uk.gov.hmcts.reform.dev.cases.model.CaseDescription;
import uk.gov.hmcts.reform.dev.cases.model.CaseEntity;
import uk.gov.hmcts.reform.dev.cases.model.CaseStatus;
import uk.gov.hmcts.reform.dev.cases.model.CaseTitle;

/**
 * Provider of functionality related to cases
 */
public interface CaseService {

  /**
   * Retrieves a case from the database based on the provided caseID
   *
   * @param caseID The ID of the case to retrieve
   * @return The case found wrapped in an Optional in case nothing is found
   */
  Optional<CaseEntity> getByID(Integer caseID);

  /**
   * Retrieves a case from the database based on the provided case number
   *
   * @param caseNumber The case number of the case to retrieve
   * @return The case found wrapped in an Optional in case nothing is found
   */
  Optional<CaseEntity> getByCaseNumber(String caseNumber);

  /**
   * Retrieves all cases from the database
   *
   * @return All the cases found
   */
  List<CaseEntity> getAll();

  /**
   * Saved the given case to the database after it converts it to a database table model
   *
   * @param caseToCreate The case to save
   * @return The saved case which includes the autogenerated caseID
   */
  CaseEntity create(NewCaseDTO caseToCreate) throws DuplicateCaseNumberException;

  /**
   * Updates the case with the given caseID to a new status
   *
   * @param caseID The ID of the case to update
   * @param status The new status of the case
   * @return The updated case model
   * @throws CaseNotFoundException If no case is found with the given caseID
   */
  CaseEntity updateStatus(Integer caseID, CaseStatus status) throws CaseNotFoundException;

  /**
   * Updates the case with the given caseID to a new title
   *
   * @param caseID The ID of the case to update
   * @param title  The new title of the case
   * @return The updated case model
   * @throws CaseNotFoundException If no case is found with the given caseID
   */
  CaseEntity updateTitle(Integer caseID, CaseTitle title) throws CaseNotFoundException;

  /**
   * Updates the case with the given caseID to a new description
   *
   * @param caseID The ID of the case to update
   * @param title  The new description of the case
   * @return The updated case model
   * @throws CaseNotFoundException If no case is found with the given caseID
   */
  CaseEntity updateDescription(Integer caseID, CaseDescription description)
      throws CaseNotFoundException;

  /**
   * Deletes the case with the given caseID
   *
   * @param caseID The ID of the case to delete
   */
  void delete(Integer caseID);

  /**
   * Deletes all cases
   */
  void deleteAll();
}
