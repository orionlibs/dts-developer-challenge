package uk.gov.hmcts.reform.dev.cases;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import uk.gov.hmcts.reform.dev.cases.api.NewCaseDTO;
import uk.gov.hmcts.reform.dev.cases.converter.NewCaseToCaseConverter;
import uk.gov.hmcts.reform.dev.cases.model.CaseEntity;
import uk.gov.hmcts.reform.dev.cases.model.CaseRepository;
import uk.gov.hmcts.reform.dev.cases.model.CaseStatus;

/**
 * Provider of functionality related to cases
 */
@Service
public class CaseService {

  @Autowired
  private CaseRepository caseRepository;
  @Autowired
  private NewCaseToCaseConverter newCaseToCaseConverter;

  /**
   * Retrieves a case from the database based on the provided caseID
   *
   * @param caseID The ID of the case to retrieve
   * @return The case found wrapped in an Optional in case nothing is found
   */
  public Optional<CaseEntity> getByID(Integer caseID) {
    return caseRepository.findById(caseID);
  }

  /**
   * Retrieves a case from the database based on the provided case number
   *
   * @param caseNumber The case number of the case to retrieve
   * @return The case found wrapped in an Optional in case nothing is found
   */
  public Optional<CaseEntity> getByCaseNumber(String caseNumber) {
    return caseRepository.findByCaseNumber(caseNumber);
  }

  /**
   * Retrieves all cases from the database
   *
   * @return All the cases found
   */
  public List<CaseEntity> getAll() {
    return caseRepository.findAll();
  }

  /**
   * Saved the given case to the database after it converts it to a database table model
   *
   * @param caseToCreate The case to save
   * @return The saved case which includes the autogenerated caseID
   */
  @Transactional(rollbackFor = DuplicateCaseNumberException.class)
  public CaseEntity create(NewCaseDTO caseToCreate) throws DuplicateCaseNumberException {
    CaseEntity caseToSave = newCaseToCaseConverter.convert(caseToCreate);
    try {
      return caseRepository.save(caseToSave);
    } catch (DataIntegrityViolationException e) {
      throw new DuplicateCaseNumberException(e.getMessage());
    }
  }

  /**
   * Updates the case with the given caseID to a new status
   *
   * @param caseID The ID of the case to update
   * @param status The new status of the case
   * @return The updated case model
   * @throws CaseNotFoundException If no case is found with the given caseID
   */
  @Transactional
  public CaseEntity updateStatus(Integer caseID, CaseStatus status) throws CaseNotFoundException {
    Optional<CaseEntity> caseToUpdateWrapped = getByID(caseID);
    if (caseToUpdateWrapped.isPresent()) {
      CaseEntity caseToUpdate = caseToUpdateWrapped.get();
      caseToUpdate.setStatus(status.getStatus().name());
      caseToUpdate.setUpdatedDateTime(LocalDateTime.now());
      caseRepository.save(caseToUpdate);
      return caseToUpdate;
    } else {
      throw new CaseNotFoundException(String.format("Case with ID %s not found", caseID));
    }
  }

  /**
   * Deletes the case with the given caseID
   *
   * @param caseID The ID of the case to delete
   */
  public void delete(Integer caseID) {
    caseRepository.deleteById(caseID);
  }

  /**
   * Deletes all cases
   */
  public void deleteAll() {
    caseRepository.deleteAll();
  }
}
