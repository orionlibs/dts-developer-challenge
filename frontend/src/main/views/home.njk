{% from "govuk/components/summary-list/macro.njk" import govukSummaryList %}

{% extends "template.njk" %}

{% block content %}
  <h1 class="govuk-heading-xl">Welcome to the MoJ Case Manager</h1>
  <button id="openCreateNewCaseModal" class="govuk-button">Create New Case</button>

  <!-- Create New Case Modal -->
    <div id="createNewCaseModal" class="govuk-modal hidden">
      <div class="govuk-modal__content">
        <h2 class="govuk-heading-l">New Case</h2>
        <form id="caseForm" method="POST" action="/cases">
          <div class="govuk-form-group">
            <label class="govuk-label" for="case_number">Case Number</label>
            <input class="govuk-input" id="case_number" name="case_number" type="text" required>
          </div>
          <div class="govuk-form-group">
            <label class="govuk-label" for="title">Title</label>
            <input class="govuk-input" id="title" name="title" type="text" required>
          </div>
          <div class="govuk-form-group">
            <label class="govuk-label" for="description">Description</label>
            <input class="govuk-input" id="description" name="description" type="text" required>
          </div>
          <div class="govuk-form-group">
            <label class="govuk-label" for="due_date_time">Due Date & Time</label>
            <input class="govuk-input" id="due_date_time" name="due_date_time" type="datetime-local" required>
          </div>
          <button type="submit" class="govuk-button">Save</button>
          <button type="button" id="closeCreateNewCaseModal" class="govuk-button govuk-button--secondary">Cancel</button>
        </form>


        <script>
            const errorMessage = "{{ error | safe }}";

            if (errorMessage && errorMessage.trim() !== "") {
                alert(errorMessage);
            }
        </script>
      </div>
    </div>

    <style>
        .govuk-modal {
          position: fixed;
          top: 0; left: 0;
          width: 100%; height: 100%;
          background: rgba(0,0,0,0.5);
          display: flex;
          justify-content: center;
          align-items: center;
        }
        .govuk-modal__content {
          background: white;
          padding: 2rem;
          border-radius: 8px;
          width: 500px;
        }
        .hidden {
          display: none;
        }
      </style>

  <!-- Change Status Modal -->
  <div id="changeStatusModal" class="govuk-modal hidden">
    <div class="govuk-modal__content">
      <h2 class="govuk-heading-l">Change Case Status</h2>
      <form id="changeStatusForm">
        <div class="govuk-form-group">
          <label class="govuk-label" for="newStatus">New Status</label>
          <input class="govuk-input" id="newStatus" name="newStatus" type="text" required>
          <input id="caseIDToChange" name="caseIDToChange" type="hidden">
        </div>
        <button type="submit" class="govuk-button">Save</button>
        <button type="button" id="closeChangeStatusModal" class="govuk-button govuk-button--secondary">Cancel</button>

      </form>
    </div>
  </div>


  {% if cases.length > 0 %}
    {% for case in cases %}
      {{ govukSummaryList({
            rows: [
              {
                key: {
                  text: "ID"
                },
                value: {
                  text: case.id
                },
                actions: {
                  items: [
                    {
                     text: "Delete",
                     attributes: {
                         "data-delete": true,
                         "data-id": case.id
                       },
                     visuallyHiddenText: "Delete case"
                   }
                  ]
                }
              },
              {
                key: {
                  text: "Case Number"
                },
                value: {
                  text: case.case_number
                },
                actions: {
                  items: [
                  ]
                }
              },
              {
                key: {
                  text: "Title"
                },
                value: {
                  html: case.title
                },
                actions: {
                  items: [
                  ]
                }
              },
              {
                key: {
                  text: "Description"
                },
                value: {
                  html: case.description
                }
              },
              {
                key: {
                  text: "Status"
                },
                value: {
                  html: case.status
                },
                actions: {
                  items: [
                    {
                      href: "#",
                      text: "Change",
                      attributes: {
                       "data-change": true,
                       "data-id": case.id
                     },
                      visuallyHiddenText: "change case status"
                    }
                  ]
                }
              },
              {
                key: {
                 text: "Created Date"
                },
                value: {
                 html: case.created_at
                },
                actions: {
                 items: [
                 ]
                }
              },
              {
                key: {
                 text: "Due Date"
                },
                value: {
                 html: case.due_at
                },
                actions: {
                 items: [
                 ]
                }
              }
            ]
          }) }}
    {% endfor %}
  {% endif %}

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      // Create Modal
      const createModal = document.getElementById("createNewCaseModal");
      document.getElementById("openCreateNewCaseModal").addEventListener("click", () => createModal.classList.remove("hidden"));
      document.getElementById("closeCreateNewCaseModal").addEventListener("click", () => createModal.classList.add("hidden"));

      // Change Status Modal
      const changeStatusModal = document.getElementById("changeStatusModal");

      document.getElementById("closeChangeStatusModal").addEventListener("click", () => {
        changeStatusModal.classList.add("hidden");
        const newStatusInput = document.getElementById("status");
        newStatusInput.value = "";
      });

      const changeStatusForm = document.getElementById("changeStatusForm");
      changeStatusForm.addEventListener("submit", async (event) => {
        event.preventDefault();
        var newStatus = document.getElementById("newStatus").value;
        var caseId = document.getElementById("caseIDToChange").value;

        if(newStatus !== 'TODO' && newStatus !== 'IN_PROGRESS' && newStatus !== 'DONE') {
          alert("The case status cannot only be TODO, IN_PROGRESS or DONE");
        }
        else {
          try {
            const response = fetch(`/cases/statuses`, {
              method: "PATCH",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                status: newStatus,
                caseIDToChange: caseId
              })
            });

            // Close the modal and reload the page
            document.getElementById("changeStatusModal").classList.add("hidden");
            window.location.reload();
          } catch (err) {
            console.error("Failed to update status:", err);
            alert("Failed to update case status: " + err.message);
          }
        }
      });

      // Delegated event handling for delete and change buttons
      document.addEventListener("click", (event) => {
        const deleteBtn = event.target.closest("[data-delete]");
        if (deleteBtn) {
          event.preventDefault();
          const caseId = deleteBtn.getAttribute("data-id");
          const confirmed = confirm(`Are you sure you want to delete case ${caseId}?`);
          if (!confirmed) return;

          fetch(`/cases/${caseId}`, {
            method: "DELETE",
            headers: { "Content-Type": "application/json" }
          })
          .then(res => {
            if (!res.ok) return res.text().then(t => Promise.reject(t));
            window.location.reload();
          })
          .catch(err => {
            console.error("Delete error:", err);
            alert("Failed to delete case: " + err);
          });
          return;
        }

        const changeBtn = event.target.closest("[data-change]");
        if (changeBtn) {
          event.preventDefault();
          currentCaseId = changeBtn.getAttribute("data-id");
          changeStatusModal.classList.remove("hidden");
          const changeCaseStatusBtn = event.target.closest("[data-change]");
          caseIDToChange.value = currentCaseId;
          return;
        }
      });
    });
  </script>
{% endblock %}
